name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Download Kaizen 0.1.0
        shell: bash
        run: |
          mkdir -p "${{ github.workspace }}/external"
          curl -L -o "${{ github.workspace }}/external/kaizen.h" \
               "https://github.com/heinsaar/kaizen/releases/download/0.1.0/kaizen.h"

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        shell: bash
        run: |
          echo "Configuring CMake..."
          cmake -B "${{ steps.strings.outputs.build-output-dir }}" \
                -S "${{ github.workspace }}" \
                -DCMAKE_CXX_COMPILER="${{ matrix.cpp_compiler }}" \
                -DCMAKE_C_COMPILER="${{ matrix.c_compiler }}" \
                -DCMAKE_BUILD_TYPE="${{ matrix.build_type }}" \
                -DCMAKE_CXX_FLAGS="-I${{ github.workspace }}/external"

      - name: Build
        shell: bash
        run: |
          echo "Building..."
          cmake --build "${{ steps.strings.outputs.build-output-dir }}" --config "${{ matrix.build_type }}"

      - name: Test
        shell: bash
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: |
          echo "Running tests..."
          ctest --build-config "${{ matrix.build_type }}"

      ################################################################
      #        RUN LARGE MATRIX BENCHMARK (1000 x 1000)
      ################################################################
      - name: Run Large Matrix Benchmark
        shell: bash
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: |
          echo "Running large matrix benchmark..."

          executable_name="matrix_benchmark"
          # On Windows, the executable is placed in a Release/ subdir
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            executable_name="matrix_benchmark.exe"
            executable_path="Release/$executable_name"
          else
            executable_path="./$executable_name"
          fi

          echo "Checking if executable exists: $executable_path"
          if [ -f "$executable_path" ]; then
            echo "Executable found, running it for size=1000, iterations=300..."
            "$executable_path" --size 1000 --iterations 300
          else
            echo "Error: Executable not found at $executable_path"
            ls -la
            exit 1
          fi

      ################################################################
      #        RUN 2x3 MATRIX BENCHMARK
      ################################################################
      - name: Run 2x3 Matrix Benchmark
        shell: bash
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: |
          echo "Running 2x3 matrix benchmark..."

          executable_name="matrix_benchmark"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            executable_name="matrix_benchmark.exe"
            executable_path="Release/$executable_name"
          else
            executable_path="./$executable_name"
          fi

          echo "Checking if executable exists: $executable_path"
          if [ -f "$executable_path" ]; then
            # Capture output in a file so we can grep it for certain lines
            "$executable_path" --size 2 --iterations 5 | tee run_2x3_output.txt
          else
            echo "Error: Executable not found at $executable_path"
            ls -la
            exit 1
          fi

      ################################################################
      #        CHECK OUTPUT OF 2x3 MATRIX BENCHMARK
      ################################################################
      - name: Check 2x3 Matrix Output
        shell: bash
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: |
          echo "Verifying 2x3 matrix test output..."

          # Check for the line that says "Comparing traversal times for matrix size 2x3"
          if grep -q "Comparing traversal times for matrix size 2x3" run_2x3_output.txt; then
            echo "SUCCESS: Found 2x3 matrix comparison line in the output!"
          else
            echo "FAIL: Could not find 2x3 matrix comparison line. Output is:"
            cat run_2x3_output.txt
            exit 1
          fi

          # Check for row-major timing line
          if grep -q "Average Row-major traversal time" run_2x3_output.txt; then
            echo "Found row-major timing line!"
          else
            echo "FAIL: Missing row-major timing line!"
            cat run_2x3_output.txt
            exit 1
          fi

      - name: Run Executable
        shell: bash
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: |
          echo "Running benchmark tests..."

          executable_name="matrix_benchmark"

          if [[ "$RUNNER_OS" == "Windows" ]]; then
            executable_name="matrix_benchmark.exe"
            executable_path="Release/$executable_name"  # Windows binary is in Release/
          else
            executable_path="./$executable_name"  # Linux/macOS binary
          fi

          # Check if the executable exists before running
          echo "Checking if executable exists: $executable_path"
          if [ -f "$executable_path" ]; then
            echo "Executable found, running it..."
            "$executable_path" --size 1000 --iterations 300
          else
            echo "Error: Executable not found at $executable_path"
            exit 1
          fi

