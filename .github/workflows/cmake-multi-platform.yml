name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Download Kaizen 0.1.0
        shell: bash
        run: |
          mkdir -p "${{ github.workspace }}/external"
          curl -L -o "${{ github.workspace }}/external/kaizen.h" \
               "https://github.com/heinsaar/kaizen/releases/download/0.1.0/kaizen.h"

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        shell: bash
        run: |
          echo "Configuring CMake..."
          cmake -B "${{ steps.strings.outputs.build-output-dir }}" \
                -S "${{ github.workspace }}" \
                -DCMAKE_CXX_COMPILER="${{ matrix.cpp_compiler }}" \
                -DCMAKE_C_COMPILER="${{ matrix.c_compiler }}" \
                -DCMAKE_BUILD_TYPE="${{ matrix.build_type }}" \
                -DCMAKE_CXX_FLAGS="-I${{ github.workspace }}/external"

      - name: Build
        shell: bash
        run: |
          echo "Building..."
          cmake --build "${{ steps.strings.outputs.build-output-dir }}" --config "${{ matrix.build_type }}"

      - name: Test
        shell: bash
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: |
          echo "Running tests..."
          ctest --build-config "${{ matrix.build_type }}"

      - name: Run Benchmark 
        shell: bash
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: |
          echo "Running benchmark tests..."
          if [[ "$RUNNER_OS" == "Windows_NT" ]]; then
            if [ -d "Release" ]; then
              cd Release
              echo "Changed directory to Release"
            fi
          fi
          if [ -f "matrix_benchmark.exe" ]; then
            benchmark_cmd="matrix_benchmark.exe"
          elif [ -f "matrix_benchmark" ]; then
            benchmark_cmd="./matrix_benchmark"
          else
            echo "Error: matrix_benchmark executable not found!"
            exit 1
          fi
          echo "Executing: $benchmark_cmd --size 3000 --iterations 10"
          $benchmark_cmd --size 3000 --iterations 10 > benchmark_output.txt
          echo "Benchmark output:"
          cat benchmark_output.txt
